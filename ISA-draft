nano-CPU32k

INSN ORDER: little endian(LE)
DATA ORDER: little endian(LE)

REGFILE: 32bit x32

ROP:
=====================================================
  RS2     RS1    RD  OPCODE
-----------------------------------------------------
 20..16 15..11 10..6 5..0
    5      5      5    6     (16 bit)
=======+======+======================================
       |      |
IMM:   |      |
=======+======+======================================
 IMM   |  RS1    RD  OPCODE
-------+---------------------------------------------
31..16 |15..11 10..6 5..0
  16   |  5      5    6     (32 bit)
=======+======+======================================
              |
REL:          |
==============+======================================
     REL      |  RD  OPCODE
--------------+--------------------------------------
    31..11    |10..6 5..0
      21      |  5    6     (32 bit)
==============+======================================

- ALU logic
AND
OR
XOR
LSL
LSR
ASR *

- ALU integer number
ADD *
SUB *
MUL *
MULU *
DIV *
DIVU *
MOD *
CMP

- FPU float number
FADDS *
FSUBS *
FMULS *
FDIVS *
FCMPS *
FITFS *
FFTIS *

- branch
JMP
JMP.I
BT
BF

- load/store
LDB *
LDH *
LDWU
STB *
STH *
STW
FENCE

- exception
EXC
RET

- trans
MHI *
WSMR
RSMR

=============================================

ISA GROUP - BASE:
0 AND
1 AND.I
2 OR
3 OR.I
4 XOR
5 XOR.I
6 LSL
7 LSL.I
8 LSR
9 LSR.I
a JMP
b JMP.I
c CMP
d BT
e BF
f LDWU
10 STW
11 BARR
12 RAISE
13 RET
14 WSMR
15 RSMR
16 

ISA GROUP - VIRT:
17 ASR *
18 ASR.I *
19 ADD *
1a ADD.I *
1b SUB *
1c MUL *
1d MULU *
1e DIV *
1f DIVU *
20 MOD *
21 LDB *
22 LDBU *
23 LDH *
24 LDHU *
25 STB *
26 STH *
27 MHI *
28 FADDS *
29 FSUBS *
2a FMULS *
2b FDIVS *
2c FCMPS *
2d FITFS *
2e FFTIS *
2f
30
31
32
33
34
35
36
37
38
39
3a
3b
3c
3d
3e
3f


//FIXME?
//FIXME!
;;FIXME!

Note that, in 32bit arch, behave of LDW instruction is equal to LDWU.
