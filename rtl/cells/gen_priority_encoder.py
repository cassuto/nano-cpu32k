import sys

DW_LOG_2_MAX = 8

with open(sys.argv[1],'w') as fp:
    fp.write(
"""/**@file
 * Priority binary encoder generated by 'gen_priority_encoder.py'
 * IMPORTANT: Do NOT modify this file manually! 
 */

/***************************************************************************/
/*  Nano-cpu 32000 (High-Performance Superscalar Processor)                */
/*                                                                         */
/*  Copyright (C) 2021 cassuto <psc-system@outlook.com>, China.            */
/*  This project is free edition; you can redistribute it and/or           */
/*  modify it under the terms of the GNU Lesser General Public             */
/*  License(GPL) as published by the Free Software Foundation; either      */
/*  version 2.1 of the License, or (at your option) any later version.     */
/*                                                                         */
/*  This project is distributed in the hope that it will be useful,        */
/*  but WITHOUT ANY WARRANTY; without even the implied warranty of         */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU      */
/*  Lesser General Public License for more details.                        */
/***************************************************************************/

`include "ncpu32k_config.h"

module ncpu32k_priority_encoder
#(
   parameter DW_LOG2
   `PARAM_NOT_SPECIFIED
)
(
   input [(1<<DW_LOG2)-1:0] din,
   output reg [DW_LOG2:0] dout,
   output reg gs
);

   generate
""")

    fp.write("      ")
    for DW_LOG2 in range(1,DW_LOG_2_MAX):
        fp.write(
"""if (DW_LOG2==%d)
        begin : gen_enc_%d
            always @(*)
                begin
                    gs = 1'b1;
                    casez(din)
""" % (DW_LOG2, DW_LOG2))
        DW=(1<<DW_LOG2)
        for i in range(DW):
            fp.write("                       %d'b"%DW)
            fp.write("".join(['?' for j in range(DW-i-1)]))
            fp.write("1")
            fp.write("".join(['0' for j in range(i)]))
            fp.write(": dout = %d'd%d;\n" %(DW_LOG2+1,i+1))
        fp.write("                       default: begin dout = %d'd%d; gs = 1'b0; end\n"%(DW_LOG2+1, 0))
        fp.write(
"""                    endcase
                end
        end
""")
        fp.write("      else ")

    fp.write("""\n         begin : gen_enc_fail
            initial
                $fatal("\\n Unimplemented size of binary encoder. Please update parameters of generator. \\n");
         end

    endgenerate

endmodule
""")